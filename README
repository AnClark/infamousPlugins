Welcome to the INFAMOUS Plugins README

Things are just firing up. So far we have exactly 5 plugins. But hey, its gettin there right?


To install, make sure you have the dependencies and then just run the script install.sh:
    chmod 700 install.sh
    ./install.sh
    
    
This will ask for your password using sudo, so be prepared. Once its complete all the plugins will be installed in the correct directory to be used by your favorite LV2 host. There are also several utilities generated in the utils/ folder that must be executed locally.

If you do not have sudo, there is now an alternative install procedure involving 2 scripts, one of which must be run with root permissions (i.e. you use su). To use this procedure issue the commands:
    ./install_no_sudo.sh
    su
    ./install_no_sudo_part2_run_as_root.sh
    exit


If you do not have sudo, there is now an alternative install procedure involving 2 scripts, one of which must be run with root permissions (i.e. you use su). To use this procedure issue the commands:
    ./install_no_sudo.sh
    su
    ./install_no_sudo_part2_run_as_root.sh
    exit


Dependencies:
    qmake (qt4-dev-tools package on ubuntu)
    lv2-dev
    gcc

Note that on ArchLinux, they do not have qmake in /usr/bin, so a special install script was created. Use ./installARCHLINUX.sh instead.

A NOTE ABOUT CV PORTS!:
I have commented out all the cv ports (envfollower and stuck) because almost no lv2 hosts are implementing that at this time. They appear as audio ports. If you wish to re-apply the CV port label, open the *.ttl file for that plugin and find the line with "lv2:AudioPort ; #CvPort ;" and remove "AudioPort ; #" which will cause the port to be declared as Cv rather than audio.

Now lets talk about what you're installing:

==========================================
1. Cellular Automaton Synth

This synthesizer plugin is an additive synthesizer, where 16 harmonics are added according to rules of elementary cellular automata. A rule is created and determines whether a cell will survive, die, or be created based on its previous state and its neighbors. Thus a harmonic will either play or be silent according to its associated cell's state. The 16 cells are on a torus where the ends wrap around to meet, therefore the highest harmonic influences the state of the first harmonic. This synth has no filter, so harmonics must be controlled through the rule and initial condition. To assist in your sound design there is a command line utility included called rule that will print out the cell states in sequence (see rule on line 53). For more information regarding Cellular Automaton in general read wikipedia under Elementary Cellular Automaton.

It is unlimitedly polyphonic and has 2 LFOs. It also features an ADBSSR envelope generator for the amplitude envelope.

Parameter Description:
    CHANNEL - Midi channel, set to 0 for all channels
    MASTER_GAIN - total volume
    RULE - rule for determining next state in cellular automaton
    CELL_LIFE - length between cell states measured in beats (most hosts default to 120bpm)
    INIT_CELLS - initial condition of cells when a note is played
    NHARMONICS - number of harmonics added in
    HARM_MODE - determines gains of the harmonics 
    HARM_WIDTH - std. deviation of random detuning of harmonics in cents
    WAVE - basic Waveform of the harmonics
    ENV_A - attack time
    ENV_D - decay time
    ENV_B - break point gain (to switch between decay and swell)
    ENV_SWL - swell time
    ENV_SUS - sustain gain
    ENV_R - release time
    AMOD_WAV - amplitude modulation waveform
    AMOD_FREQ - amplitude modulation frequency
    AMOD_GAIN - amplitude modulation gain
    FMOD_WAV - frequency modulation waveform
    FMOD_FREQ - frequency modulation frequency
    FMOD_GAIN - frequency modulation gain




==========================================
2. rule

This visulizes cell automata on a torus. Run it by opening a terminal, navigating to the utils folder and run 

    ./rule <rule number> <initial condition>
    
The least significant digit corresponds to the first harmonic


==========================================
3. Envelope Follower

This is a fully featured envelope follower plugin. It can be used for pumping the gain with the bass or all sorts of other things that I don't really know about. Someone just wanted it so I made it. It sends a midi control value according to the amplitude of the input audio.

Parameter Description: 
    PEAKRMS - blend of peak and/or rms value for amplitude
    THRESHOLD - audio low value mapped MINV
    SATURATION - audio high value mapped to MAXV (anything greater still outputs MAXV)
    ATIME - rise time of the output
    DTIME - fall time of the output
    CHANNEL - Midi channel to send output over
    CONTROL_NO - Midi control # to change
    MINV - minimum midi value to send
    MAXV - maximum midi value to send
    REVERSE - switches direction of the midi output (larger input amplitude -> smaller midi value)
    CMINV - minimum CV to send
    CMAXV - maximum CV to send
    CREVERSE - switches direction of the CV output

===========================================
4. Hip2B

This is a distortion plugin that is even more fun than I imagined. Inspired by effect pedals by dwarfcraft, this takes your analog signal and turns it into a square wave. It gives you a glitchy type effect. It was originally meant to be pretty minimal, but I decided there wasn't a good reason to be so a simple amplifier was added to turn it down, and some basic DC offset removal was added. Its not limited in polyphony or anything, it is simply distorting your signal to be a bandlimited square wave. Basically its a switching function with hysteresis. Play with the up and down threshold parameters to change the square wave pulse width and have some fun. You'll find lower values give more sustain, but stay away from 0.0 on those two, it gets really loud and noisy. Unless thats what you want. Be my guest. Depending on your noise floor, other low values may be problematic in the same light.

Parameter Description: 
    UP - threshold that the input must cross for the square wave to rise
    DOWN - threshold that the input must cross for the square wave to fall
    OCTAVE - change the octave of the square wave output (down to -2)
    INGAIN - input gain, also affects the output signal in the mix, use to get your signal passing the thresholds
    WETDRY - mix of the original signal with the square signal
    OUTGAIN - output gain

===========================================
4. cheap distortion

Another distortion plugin, but this one I wanted to getit as light as possible. I haven't benchmarked it, but using some hackery on the bits I accomplished a pretty nice saturation function waveshaper using only a bitshift and an integer add. Thats right not a single floating point operation! However this cheapness and hackery comes at a cost that its using undefined behavior and breaks some rules or at least is highly not reccommended. It works when compiled with GCC on x86 systems. Go ahead and try it, the worst that happens is that it sounds awful. On machines with different endianness it will fail for sure. If you experience this I can easily make one for the other endian machines. Just let me know. Becuase the goal was super cheap computation, there is no input or output gains, so make use of your simple amplifier plugins. All in all though it worked out better than I dreamed. It even has 3 different waveshapes of increasing "aggression". On 2 & 3 settings, you'll probably want a gate, because it has really high gain for values near zero.

Parameter Description:
    AGGRESSION - wave shape, higher basically means more gain

=============================================
5. stuck

This is a clone of the electro-harmonix freeze. It drones the note being played when the "Stick It!" port is set to 1 (or the CV port input goes above 1), causing the note to be "stuck". Once the port falls below 1 the drone is released with a decay set in seconds. The drone is added to the dry signal (so original signal is passed through at all times un-processed). This plugin is pretty useless except in live situations, though I'd love someone to creatively prove me wrong.

    STICKIT - control the drone being on (>=1) or off (<1)
    DRONEGAIN - gain of drone
    RELEASE - time of drone decay in seconds

