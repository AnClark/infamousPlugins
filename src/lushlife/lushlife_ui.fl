# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cxx}
class CaSynthUI {open
} {
  Function {show()} {open
  } {
    Fl_Window ui {
      label {the infamous lush life} open
      xywh {665 774 630 400} type Double box UP_BOX resizable
      code0 {\#include"ffffltk.h"}
      code1 {\#include"lv2/lv2plug.in/ns/extensions/ui/ui.h"}
      code2 {using namespace ffffltk;}
      code3 {o->show();} visible
    } {
      Fl_Box bg {
        xywh {0 0 630 400}
        code0 {\#include"lushlife.h"}
        code1 {\#include"draw_lushbg.h"}
        code3 {o->drawing_h = cairo_code_draw_lushbg_get_height(); o->drawing_w = cairo_code_draw_lushbg_get_width(); o->drawing_f = &cairo_code_draw_lushbg_render;}
        class Background
      }
      Fl_Box logo {
        xywh {3 108 47 107}
        code0 {\#include"draw_infamousLogoTrans.h"}
        code1 {o->drawing_h = cairo_code_draw_infamousLogoTrans_get_height(); o->drawing_w = cairo_code_draw_infamousLogoTrans_get_width(); o->drawing_f = &cairo_code_draw_infamousLogoTrans_render;}
        code2 {o->stretch = false;}
        class Background
      }
      Fl_Box title {
        xywh {186 300 273 41}
        code0 {\#include"draw_lushLabels.h"}
        code1 {o->drawing_h = cairo_code_draw_lushLabel_get_height(); o->drawing_w = cairo_code_draw_lushLabel_get_width(); o->drawing_f = &cairo_code_draw_lushLabel_render;}
        code2 {o->stretch = false;}
        class Background
      }
      Fl_Box ax {
        xywh {14 244 80 92}
        code0 {\#include"draw_lushLabels.h"}
        code1 {o->drawing_h = cairo_code_draw_lushAxisLabel_get_height(); o->drawing_w = cairo_code_draw_lushAxisLabel_get_width(); o->drawing_f = &cairo_code_draw_lushAxisLabel_render;}
        code2 {o->stretch = false;}
        class Background
      }
      Fl_Box sy {
        xywh {503 300 43 10}
        code0 {\#include"draw_lushLabels.h"}
        code1 {o->drawing_h = cairo_code_draw_lushSyncLabel_get_height(); o->drawing_w = cairo_code_draw_lushSyncLabel_get_width(); o->drawing_f = &cairo_code_draw_lushSyncLabel_render;}
        code2 {o->stretch = false;}
        class Background
      }
      Fl_Box fr {
        xywh {557 7 42 12}
        code0 {\#include"draw_lushLabels.h"}
        code1 {o->drawing_h = cairo_code_draw_casFrame_get_height(); o->drawing_w = cairo_code_draw_casFrame_get_width(); o->drawing_f = &cairo_code_draw_casFrame_render;}
        code2 {o->stretch = false;}
        class Background
      }
      Fl_Box sh {
        xywh {553 301 52 39}
        code0 {\#include"draw_casFrames.h"}
        code1 {o->drawing_h = cairo_code_draw_casFrame_get_height(); o->drawing_w = cairo_code_draw_casFrame_get_width(); o->drawing_f = &cairo_code_draw_casFrame_render;}
        code2 {o->stretch = false;}
        class Background
      }
      Fl_Button activate0 {
        callback {if(activate0->value())
{
    gp0->activate();
    pd0->activate();
    pdxb0->activate();
    pdyb0->activate();
    message->copy_label("dbl1          Active");
}
else
{
    gp0->deactivate();
    pd0->deactivate();
    pdxb0->deactivate();
    pdyb0->deactivate();
    message->copy_label("dbl1             Off");
}
write_function(controller,ACTIVE0,sizeof(float),0,activate0->floatval);}
        tooltip {rule, bit 7} xywh {513 36 16 16}
        code1 {\#include"draw_LED.h"}
        code2 {o->type(FL_TOGGLE_BUTTON);}
        code3 {o->drawing_h = cairo_code_draw_LED_get_height(); o->drawing_w = cairo_code_draw_LED_get_width(); o->drawing_f = &cairo_code_draw_redLED_render;}
        class Button
      }
      Fl_Button activate1 {
        callback {if(activate1->value())
{
    gp1->activate();
    pd1->activate();
    pdxb1->activate();
    pdyb1->activate();
    message->copy_label("dbl2          Active");
}
else
{
    gp1->deactivate();
    pd1->deactivate();
    pdxb1->deactivate();
    pdyb1->deactivate();
    message->copy_label("dbl2             Off");
}
write_function(controller,ACTIVE1,sizeof(float),0,activate1->floatval);}
        tooltip {rule, bit 6} xywh {513 80 16 16}
        code1 {\#include"draw_LED.h"}
        code2 {o->type(FL_TOGGLE_BUTTON);}
        code3 {o->drawing_h = cairo_code_draw_LED_get_height(); o->drawing_w = cairo_code_draw_LED_get_width(); o->drawing_f = &cairo_code_draw_blueLED_render;}
        class Button
      }
      Fl_Button activate2 {
        callback {if(activate2->value())
{
    gp2->activate();
    pd2->activate();
    pdxb2->activate();
    pdyb2->activate();
    message->copy_label("dbl3          Active");
}
else
{
    gp2->deactivate();
    pd2->deactivate();
    pdxb2->deactivate();
    pdyb2->deactivate();
    message->copy_label("dbl3             Off");
}
write_function(controller,ACTIVE2,sizeof(float),0,activate2->floatval);}
        tooltip {rule, bit 5} xywh {513 126 16 16}
        code1 {\#include"draw_LED.h"}
        code2 {o->type(FL_TOGGLE_BUTTON);}
        code3 {o->drawing_h = cairo_code_draw_LED_get_height(); o->drawing_w = cairo_code_draw_LED_get_width(); o->drawing_f = &cairo_code_draw_yellowLED_render;}
        class Button
      }
      Fl_Button activate3 {
        callback {if(activate3->value())
{
    gp3->activate();
    pd3->activate();
    pdxb3->activate();
    pdyb3->activate();
    message->copy_label("dbl4          Active");
}
else
{
    gp3->deactivate();
    pd3->deactivate();
    pdxb3->deactivate();
    pdyb3->deactivate();
    message->copy_label("dbl4             Off");
}
write_function(controller,ACTIVE3,sizeof(float),0,activate3->floatval);}
        tooltip {rule, bit 4} xywh {513 172 16 16} value 1
        code1 {\#include"draw_LED.h"}
        code2 {o->type(FL_TOGGLE_BUTTON);}
        code3 {o->drawing_h = cairo_code_draw_LED_get_height(); o->drawing_w = cairo_code_draw_LED_get_width(); o->drawing_f = &cairo_code_draw_greenLED_render;}
        class Button
      }
      Fl_Button activate4 {
        callback {if(activate4->value())
{
    gp4->activate();
    pd4->activate();
    pdxb4->activate();
    pdyb4->activate();
    message->copy_label("dbl5          Active");
}
else
{
    gp4->deactivate();
    pd4->deactivate();
    pdxb4->deactivate();
    pdyb4->deactivate();
    message->copy_label("dbl5             Off");
}
write_function(controller,ACTIVE4,sizeof(float),0,activate4->floatval);}
        tooltip {rule, bit 3} xywh {513 218 16 16} value 1
        code1 {\#include"draw_LED.h"}
        code2 {o->type(FL_TOGGLE_BUTTON);}
        code3 {o->drawing_h = cairo_code_draw_LED_get_height(); o->drawing_w = cairo_code_draw_LED_get_width(); o->drawing_f = &cairo_code_draw_orangeLED_render;}
        class Button
      }
      Fl_Button activate5 {
        callback {if(activate5->value())
{
    gp5->activate();
    pd5->activate();
    pdxb5->activate();
    pdyb5->activate();
    message->copy_label("dbl6          Active");
}
else
{
    gp5->deactivate();
    pd5->deactivate();
    pdxb5->deactivate();
    pdyb5->deactivate();
    message->copy_label("dbl6             Off");
}
write_function(controller,ACTIVE5,sizeof(float),0,activate5->floatval);}
        tooltip {rule, bit 2} xywh {513 263 16 16} value 1
        code1 {\#include"draw_LED.h"}
        code2 {o->type(FL_TOGGLE_BUTTON);}
        code3 {o->drawing_h = cairo_code_draw_LED_get_height(); o->drawing_w = cairo_code_draw_LED_get_width(); o->drawing_f = &cairo_code_draw_purpleLED_render;}
        class Button
      }
      Fl_Button sync {
        callback {write_function(controller,LFO_SYNC,sizeof(float),0,sync->floatval);
param->copy_label("LFOs Sync'd");}
        tooltip {rule, bit 1} xywh {514 317 20 20} value 1
        code1 {\#include"draw_whiteTinyButton.h"}
        code3 {o->drawing_h = cairo_code_draw_whiteTinyButton_get_height(); o->drawing_w = cairo_code_draw_whiteTinyButton_get_width(); o->drawing_f = &cairo_code_draw_whiteTinyButton_render;}
        class Button
      }
      Fl_Button pangainhide {
        callback {if(pangainhide->value())
{
  gp0->activate();
  gp1->activate(); 
  gp2->activate(); 
  gp3->activate();  
  gp4->activate();  
  gp5->activate();
}
else
{
  pitchdelayhide->value(1);
  gp0->deactivate();
  gp1->deactivate(); 
  gp2->deactivate(); 
  gp3->deactivate();  
  gp4->deactivate();  
  gp5->deactivate();
  
}} selected
        tooltip {rule, bit 0} xywh {32 296 20 20}
        code1 {\#include"draw_whiteTinyButton.h"}
        code3 {o->drawing_h = cairo_code_draw_whiteTinyButton_get_height(); o->drawing_w = cairo_code_draw_whiteTinyButton_get_width(); o->drawing_f = &cairo_code_draw_whiteTinyButton_render;}
        class Button
      }
      Fl_Button pitchdelayhide {
        tooltip {initial condition, bit 15} xywh {10 318 20 20}
        code1 {\#include"draw_whiteTinyButton.h"}
        code3 {o->drawing_h = cairo_code_draw_whiteTinyButton_get_height(); o->drawing_w = cairo_code_draw_whiteTinyButton_get_width(); o->drawing_f = &cairo_code_draw_whiteTinyButton_render;}
        class Button
      }
      Fl_Dial mastergain {
        callback {write_function(controller,MASTER_GAIN,sizeof(float),0,&mastergain->floatvalue);
char s[20];
sprintf(s,"%19.3f",mastergain->floatvalue);
param->copy_label("MASTER GAIN");
value->copy_label(s);}
        tooltip gain xywh {118 300 45 45} maximum 2 step 0.02 value 1
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false;}
        class Dial
      }
      Fl_Dial pitchfreq0 {
        callback {write_function(controller,CHANNEL,sizeof(float),0,&channel->floatvalue);
char s[20];
sprintf(s,"%18i",(int)channel->floatvalue);
param->copy_label("MIDI CHANNEL");
value->copy_label(s);}
        tooltip {MIDI channel} xywh {532 20 45 45} maximum 16 step 0.5
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false; o->lock2int = true;}
        class Dial
      }
      Fl_Dial pitchfreq1 {
        callback {write_function(controller,WAVE,sizeof(float),0,&cellwaveform->floatvalue);
param->copy_label("CELL WAVEFORM");
int a = cellwaveform->floatvalue; 
switch(a)
{
case 0:
  value->copy_label("              SINE");
  break;
case 1:
  value->copy_label("               SAW");
  break;
case 2:
  value->copy_label("            SQUARE");
  break;
case 3:
  value->copy_label("          TRIANGLE");
  break;
case 4:
  value->copy_label("       WHITE NOISE");
  break;
case 5:
  value->copy_label("            RANDOM");
  break;
}}
        tooltip waveform xywh {532 66 45 45} maximum 5 step 0.1
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false; o->lock2int = true;}
        class Dial
      }
      Fl_Dial pitchfreq2 {
        callback {write_function(controller,CELL_LIFE,sizeof(float),0,&lifetime->floatvalue);
char s[20];
sprintf(s,"%13.3f BEATS",lifetime->floatvalue);
param->copy_label("CELL LIFETIME");
value->copy_label(s);}
        tooltip {time between cell transitions} xywh {532 112 45 45} minimum 0.001 maximum 10 step 0.05 value 0.25
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false;}
        class Dial
      }
      Fl_Dial pitchfreq3 {
        callback {write_function(controller,HARM_MODE,sizeof(float),0,&harmgain->floatvalue);
param->copy_label("HARMONIC GAINS");
int a = harmgain->floatvalue; 
switch(a)
{
case 0:
  value->copy_label("              SINC");
  break; case 1:
  value->copy_label("               SAW");
  break;
case 2:
  value->copy_label("            SQUARE");
  break;
case 3:
  value->copy_label("          TRIANGLE");
  break;
}}
        tooltip {gain of harmonics} xywh {532 158 45 45} maximum 3 step 0.08 value 1
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false; o->lock2int = true;}
        class Dial
      }
      Fl_Dial pitchfreq4 {
        callback {write_function(controller,NHARMONICS,sizeof(float),0,&nharmonics->floatvalue);
char s[20];
sprintf(s,"%18i",(int)nharmonics->floatvalue);
param->copy_label("NUM. HARMONICS");
value->copy_label(s);}
        tooltip {num. of harmonics} xywh {532 203 45 45} maximum 16 step 0.1 value 12
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false; o->lock2int = true;}
        class Dial
      }
      Fl_Dial pitchfreq5 {
        callback {write_function(controller,HARM_WIDTH,sizeof(float),0,&harmwidth->floatvalue);
char s[20];
sprintf(s,"%13.2f CENTS",harmwidth->floatvalue);
param->copy_label("HARMONIC WIDTH");
value->copy_label(s);}
        tooltip {width/detune} xywh {532 249 45 45} maximum 50 step 0.1
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false;}
        class Dial
      }
      Fl_Dial delayfreq0 {
        callback {write_function(controller,ENV_A,sizeof(float),0,&a->floatvalue);
char s[20];
sprintf(s,"%17.3f S",a->floatvalue);
param->copy_label("ENV. ATTACK");
value->copy_label(s);}
        tooltip attack xywh {580 20 45 45} minimum 0.001 maximum 15 step 0.1 value 0.1
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false;}
        class Dial
      }
      Fl_Dial delayfreq1 {
        callback {write_function(controller,ENV_D,sizeof(float),0,&d->floatvalue);
char s[20];
sprintf(s,"%17.3f S",d->floatvalue);
param->copy_label("ENV. DECAY");
value->copy_label(s);}
        tooltip decay xywh {580 66 45 45} minimum 0.001 maximum 15 step 0.1 value 0.1
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false;}
        class Dial
      }
      Fl_Dial delayfreq2 {
        callback {write_function(controller,ENV_B,sizeof(float),0,&b->floatvalue);
char s[20];
sprintf(s,"%19.3f",b->floatvalue);
param->copy_label("ENV. BREAK POINT");
value->copy_label(s);}
        tooltip {break point} xywh {580 112 45 45} step 0.01 value 0.5
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false;}
        class Dial
      }
      Fl_Dial delayfreq3 {
        callback {write_function(controller,ENV_SWL,sizeof(float),0,&sw->floatvalue);
char s[20];
sprintf(s,"%17.3f S",sw->floatvalue);
param->copy_label("ENV. SWELL");
value->copy_label(s);}
        tooltip swell xywh {580 158 45 45} minimum 0.001 maximum 15 step 0.1 value 3
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false;}
        class Dial
      }
      Fl_Dial delayfreq4 {
        callback {write_function(controller,ENV_SUS,sizeof(float),0,&su->floatvalue);
char s[20];
sprintf(s,"%19.3f",su->floatvalue);
param->copy_label("ENV. SUSTAIN");
value->copy_label(s);}
        tooltip sustain xywh {580 203 45 45} step 0.01 value 0.75
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false;}
        class Dial
      }
      Fl_Dial delayfreq5 {
        callback {write_function(controller,ENV_R,sizeof(float),0,&r->floatvalue);
char s[20];
sprintf(s,"%17.3f S",r->floatvalue);
param->copy_label("ENV. RELEASE");
value->copy_label(s);}
        tooltip release xywh {580 249 45 45} minimum 0.001 maximum 15 step 0.1 value 0.1
        code1 {\#include"draw_flatDial.h"}
        code2 {o->drawing_h = cairo_code_draw_flatDial_get_height(); o->drawing_w = cairo_code_draw_flatDial_get_width(); o->drawing_f = &cairo_code_draw_flatDial_render;}
        code3 {o->drawLabel=false;}
        class Dial
      }
      Fl_Box message {
        tooltip {current output value} xywh {17 350 600 33}
        code0 {\#include"draw_rgb5x7.h"}
        code2 {o->drawing_h = cairo_code_draw_16seg_get_height(); o->drawing_w = cairo_code_draw_16seg_get_width(); o->drawing_f = &cairo_code_draw_red16seg_render;}
        code3 {o->nchars = 18; o->periods = false;}
        class AsciiDisplay
      }
      Fl_Group graph {open
        xywh {53 17 456 279}
      } {
        Fl_Box drygp {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box gp0 {
          xywh {50 50 15 15}
          code0 {\#include"ffffltk_xy.h"}
          code1 {\#include"draw_lushGraphPoint.h"}
          class XYhandle
        }
        Fl_Box gp1 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box gp2 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box gp3 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box gp4 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box gp5 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box pd0 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box pdxb0 {
          xywh {55 50 4 15}
          code1 {\#include"draw_lushGraphXBound.h"}
          class XYhandle
        }
        Fl_Box pdyb0 {
          xywh {45 50 15 4}
          code1 {\#include"draw_lushGraphYBound.h"}
          class XYhandle
        }
        Fl_Box pd1 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box pdxb1 {
          xywh {55 50 4 15}
          code1 {\#include"draw_lushGraphXBound.h"}
          class XYhandle
        }
        Fl_Box pdyb1 {
          xywh {45 50 15 4}
          code1 {\#include"draw_lushGraphYBound.h"}
          class XYhandle
        }
        Fl_Box pd2 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box pdxb2 {
          xywh {55 50 4 15}
          code1 {\#include"draw_lushGraphXBound.h"}
          class XYhandle
        }
        Fl_Box pdyb2 {
          xywh {45 50 15 4}
          code1 {\#include"draw_lushGraphYBound.h"}
          class XYhandle
        }
        Fl_Box pd3 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box pdxb3 {
          xywh {55 50 4 15}
          code1 {\#include"draw_lushGraphXBound.h"}
          class XYhandle
        }
        Fl_Box pdyb3 {
          xywh {45 50 15 4}
          code1 {\#include"draw_lushGraphYBound.h"}
          class XYhandle
        }
        Fl_Box pd4 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box pdxb4 {
          xywh {55 50 4 15}
          code1 {\#include"draw_lushGraphXBound.h"}
          class XYhandle
        }
        Fl_Box pdyb4 {
          xywh {45 50 15 4}
          code1 {\#include"draw_lushGraphYBound.h"}
          class XYhandle
        }
        Fl_Box pd5 {
          xywh {50 50 15 15}
          class XYhandle
        }
        Fl_Box pdxb5 {
          xywh {55 50 4 15}
          code1 {\#include"draw_lushGraphXBound.h"}
          class XYhandle
        }
        Fl_Box pdyb5 {
          xywh {45 50 15 4}
          code1 {\#include"draw_lushGraphYBound.h"}
          class XYhandle
        }
      }
    }
  }
  decl {LV2UI_Write_Function write_function;} {public local
  }
  decl {LV2UI_Controller controller;} {public local
  }
  Function {idle()} {open return_type void
  } {
    code {Fl::check();
Fl::flush();} {}
  }
} 
